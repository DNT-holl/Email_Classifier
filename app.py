import streamlit as st
from data_processor import DataProcessor
from spam_classifier import SpamClassifier
from topic_classifier import TopicClassifier
import pandas as pd
import plotly.express as px

def load_models():
    """T·∫£i c·∫£ hai m√¥ h√¨nh ph√¢n lo·∫°i spam v√† ch·ªß ƒë·ªÅ"""
    # T·∫£i b·ªô ph√¢n lo·∫°i spam
    spam_classifier = SpamClassifier()
    try:
        spam_classifier.load_model()
        st.success("ƒê√£ t·∫£i m√¥ h√¨nh spam th√†nh c√¥ng!")
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh spam! Vui l√≤ng ch·∫°y 'python train_model.py' tr∆∞·ªõc.")
        st.stop()
        
    # T·∫£i b·ªô ph√¢n lo·∫°i ch·ªß ƒë·ªÅ
    topic_classifier = TopicClassifier()
    try:
        topic_classifier.load_model()
        st.success("ƒê√£ t·∫£i m√¥ h√¨nh ch·ªß ƒë·ªÅ th√†nh c√¥ng!")
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ch·ªß ƒë·ªÅ! Vui l√≤ng ch·∫°y 'python train_topic_model.py' tr∆∞·ªõc.")
        st.stop()
        
    return spam_classifier, topic_classifier

def main():
    st.set_page_config(
        page_title="H·ªá th·ªëng Ph√¢n lo·∫°i Email",
        page_icon="üìß",
        layout="wide"
    )
    
    st.title("üìß H·ªá th·ªëng Ph√¢n lo·∫°i Email")
    st.markdown("""
    H·ªá th·ªëng n√†y c√≥ th·ªÉ:
    1. Ph√°t hi·ªán email spam ho·∫∑c kh√¥ng spam
    2. Ph√¢n lo·∫°i email kh√¥ng spam th√†nh c√°c ch·ªß ƒë·ªÅ (c√¥ng ngh·ªá, kinh doanh, gi·∫£i tr√≠, th·ªÉ thao, ch√≠nh tr·ªã)
    """)
    
    # T·∫£i m√¥ h√¨nh
    spam_classifier, topic_classifier = load_models()
    
    # Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω d·ªØ li·ªáu
    data_processor = DataProcessor('spam.csv')
    
    # ƒê·∫£m b·∫£o vectorizer ƒë∆∞·ª£c t·∫£i
    try:
        data_processor.load_spam_vectorizer()
        data_processor.load_topic_vectorizer()
    except FileNotFoundError as e:
        st.error(f"L·ªói: {str(e)}")
        st.error("Vui l√≤ng ch·∫°y c·∫£ 'python train_model.py' v√† 'python train_topic_model.py' tr∆∞·ªõc.")
        st.stop()
    
    # T·∫°o hai c·ªôt cho ƒë·∫ßu v√†o v√† k·∫øt qu·∫£
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("Nh·∫≠p Email")
        email_text = st.text_area(
            "Nh·∫≠p n·ªôi dung email c·ªßa b·∫°n t·∫°i ƒë√¢y:",
            height=300,
            placeholder="Nh·∫≠p ho·∫∑c d√°n n·ªôi dung email c·ªßa b·∫°n t·∫°i ƒë√¢y..."
        )
        
        if st.button("Ph√¢n t√≠ch Email", type="primary"):
            if not email_text.strip():
                st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung email!")
            else:
                try:
                    # X·ª≠ l√Ω email
                    X_spam = data_processor.transform_new_data([email_text], vectorizer_type='spam')
                    
                    # L·∫•y d·ª± ƒëo√°n spam
                    spam_prediction = spam_classifier.predict(X_spam)[0]
                    spam_probability = spam_classifier.predict_proba(X_spam)[0]
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong c·ªôt th·ª© hai
                    with col2:
                        st.subheader("K·∫øt qu·∫£ Ph√¢n t√≠ch")
                        
                        # T·∫°o container cho k·∫øt qu·∫£
                        results_container = st.container()
                        
                        with results_container:
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£ spam
                            spam_result = "Spam" if spam_prediction == 1 else "Kh√¥ng ph·∫£i Spam"
                            spam_color = "red" if spam_prediction == 1 else "green"
                            st.markdown(f"### Ph√°t hi·ªán Spam: <span style='color:{spam_color}'>{spam_result}</span>", unsafe_allow_html=True)
                            st.progress(spam_probability[1])
                            st.markdown(f"ƒê·ªô tin c·∫≠y: {spam_probability[1]*100:.2f}% (spam)")
                            
                            # N·∫øu kh√¥ng ph·∫£i spam, ph√¢n lo·∫°i ch·ªß ƒë·ªÅ
                            if spam_prediction == 0:
                                try:
                                    # L·∫•y d·ª± ƒëo√°n ch·ªß ƒë·ªÅ
                                    X_topic = data_processor.transform_new_data([email_text], vectorizer_type='topic')
                                    topic_prediction = topic_classifier.predict(X_topic)[0]
                                    topic_probability = topic_classifier.predict_proba(X_topic)[0]
                                    
                                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ch·ªß ƒë·ªÅ
                                    st.markdown("### Ph√¢n lo·∫°i Ch·ªß ƒë·ªÅ")
                                    
                                    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho x√°c su·∫•t ch·ªß ƒë·ªÅ
                                    topic_names = topic_classifier.topics
                                    topic_probs = topic_probability
                                    
                                    # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
                                    df = pd.DataFrame({
                                        'Ch·ªß ƒë·ªÅ': topic_names,
                                        'X√°c su·∫•t': topic_probs
                                    })
                                    
                                    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
                                    fig = px.bar(
                                        df,
                                        x='Ch·ªß ƒë·ªÅ',
                                        y='X√°c su·∫•t',
                                        color='X√°c su·∫•t',
                                        color_continuous_scale='Viridis',
                                        title='X√°c su·∫•t Ph√¢n lo·∫°i Ch·ªß ƒë·ªÅ'
                                    )
                                    
                                    # C·∫≠p nh·∫≠t layout
                                    fig.update_layout(
                                        xaxis_title="Ch·ªß ƒë·ªÅ",
                                        yaxis_title="X√°c su·∫•t",
                                        showlegend=False
                                    )
                                    
                                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                                    st.plotly_chart(fig, use_container_width=True)
                                    
                                    # Hi·ªÉn th·ªã ch·ªß ƒë·ªÅ ƒë∆∞·ª£c d·ª± ƒëo√°n
                                    st.markdown(f"**Ch·ªß ƒë·ªÅ d·ª± ƒëo√°n:** {topic_classifier.get_topic_name(topic_prediction)}")
                                    st.markdown(f"**ƒê·ªô tin c·∫≠y:** {topic_probability[topic_prediction]*100:.2f}%")
                                    
                                except Exception as e:
                                    st.error(f"L·ªói khi ph√¢n lo·∫°i ch·ªß ƒë·ªÅ: {str(e)}")
                                    st.error("Vui l√≤ng ch·∫°y 'python train_topic_model.py' ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh ch·ªß ƒë·ªÅ.")
                
                except Exception as e:
                    st.error(f"L·ªói khi x·ª≠ l√Ω email: {str(e)}")
    
    # Th√™m th√¥ng tin v·ªÅ h·ªá th·ªëng
    with st.sidebar:
        st.header("Gi·ªõi thi·ªáu")
        st.markdown("""
        H·ªá th·ªëng n√†y s·ª≠ d·ª•ng h·ªçc m√°y ƒë·ªÉ:
        1. Ph√°t hi·ªán email spam s·ª≠ d·ª•ng ph√¢n lo·∫°i Naive Bayes
        2. Ph√¢n lo·∫°i email kh√¥ng spam th√†nh 5 ch·ªß ƒë·ªÅ:
           - C√¥ng ngh·ªá
           - Kinh doanh
           - Gi·∫£i tr√≠
           - Th·ªÉ thao
           - Ch√≠nh tr·ªã
        
        H·ªá th·ªëng ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n:
        - B·ªô d·ªØ li·ªáu spam cho vi·ªác ph√°t hi·ªán spam
        - B·ªô d·ªØ li·ªáu BBC News cho vi·ªác ph√¢n lo·∫°i ch·ªß ƒë·ªÅ
        """)
        
        st.header("C√°ch s·ª≠ d·ª•ng")
        st.markdown("""
        1. Nh·∫≠p ho·∫∑c d√°n n·ªôi dung email v√†o √¥ vƒÉn b·∫£n
        2. Nh·∫•n n√∫t "Ph√¢n t√≠ch Email"
        3. Xem k·∫øt qu·∫£:
           - K·∫øt qu·∫£ ph√°t hi·ªán spam
           - Ph√¢n lo·∫°i ch·ªß ƒë·ªÅ (n·∫øu kh√¥ng ph·∫£i spam)
        """)

if __name__ == "__main__":
    main() 